name: Kotlin Tip Notification

on:
  push:
    branches:
      - main  # 메인 브랜치에 푸시될 때 실행
    paths:
      - '**/*.md'  # 마크다운 파일이 변경될 때만 실행
  
  # 수동 트리거 추가
  workflow_dispatch:
    inputs:
      tip_path:
        description: '알림을 보낼 팁 파일 경로 (예: 01-기본-문법과-타입-시스템/01-null-안전성-안전-호출-연산자.md)'
        required: true
        type: string

jobs:
  notify-slack:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # 이전 커밋과 비교하기 위해 필요

      - name: Debug environment
        run: |
          echo "GitHub Repository: ${{ github.repository }}"
          echo "GitHub Event Name: ${{ github.event_name }}"
          echo "GitHub SHA: ${{ github.sha }}"
          echo "GitHub Ref: ${{ github.ref }}"
          echo "Current directory:"
          ls -la

      - name: Get changed files (for push event)
        id: changed-files
        if: github.event_name == 'push'
        uses: tj-actions/changed-files@v35
        with:
          files: '**/*.md'  # 마크다운 파일만 확인

      - name: Debug changed files
        if: github.event_name == 'push'
        run: |
          echo "All changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
          echo "Modified files: ${{ steps.changed-files.outputs.modified_files }}"
          echo "Added files: ${{ steps.changed-files.outputs.added_files }}"

      - name: Set tip files for manual trigger
        id: manual-tip
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "files=${{ github.event.inputs.tip_path }}" >> $GITHUB_OUTPUT
          echo "Manual trigger file path: ${{ github.event.inputs.tip_path }}"

      - name: Find new or modified tip files
        id: find-tips
        run: |
          TIPS=""
          
          # 이벤트 타입에 따라 다른 파일 목록 사용
          if [[ "${{ github.event_name }}" == "push" ]]; then
            FILES="${{ steps.changed-files.outputs.all_changed_files }}"
            echo "Processing push event files: $FILES"
          else
            FILES="${{ steps.manual-tip.outputs.files }}"
            echo "Processing manual trigger files: $FILES"
          fi
          
          # 디렉토리 내용 확인
          echo "Current directory contents:"
          ls -la
          
          for file in $FILES; do
            echo "Processing file: $file"
            
            if [[ -f "$file" ]]; then
              echo "File exists"
              
              if [[ $file == *".md" ]]; then
                echo "File is a markdown file"
                
                if [[ $file == *"기본-문법과-타입-시스템"* || $file == *"함수와-람다"* || $file == *"컬렉션과-함수형-프로그래밍"* || $file == *"스코프-함수"* || $file == *"클래스와-객체"* || $file == *"확장-기능"* || $file == *"코루틴-기초"* || $file == *"코루틴-고급"* || $file == *"상호운용성과-도구"* || $file == *"실용적인-팁"* ]]; then
                  echo "File is a tip file"
                  
                  # 파일 내용에서 첫 번째 헤딩 추출
                  HEADING=$(grep -m 1 "^# " "$file" | sed 's/^# //')
                  echo "Extracted heading: $HEADING"
                  
                  # 파일 경로와 제목 저장
                  if [ -n "$HEADING" ]; then
                    TIPS="$TIPS• <https://github.com/${{ github.repository }}/blob/main/$file|$HEADING>"
                  else
                    # 헤딩이 없으면 파일 이름 사용
                    TIP_NAME=$(basename "$file" .md | sed -E 's/^[0-9]+-//' | sed -E 's/-/ /g' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')
                    TIPS="$TIPS• <https://github.com/${{ github.repository }}/blob/main/$file|$TIP_NAME>"
                  fi
                  echo "Current tips list: $TIPS"
                else
                  echo "File is not a tip file"
                fi
              else
                echo "File is not a markdown file"
              fi
            else
              echo "File does not exist: $file"
            fi
          done
          
          if [ -z "$TIPS" ]; then
            echo "No tip files were found."
            echo "has_tips=false" >> $GITHUB_OUTPUT
          else
            echo "has_tips=true" >> $GITHUB_OUTPUT
            echo "tips=$TIPS" >> $GITHUB_OUTPUT
          fi

      - name: Debug outputs
        run: |
          echo "has_tips: ${{ steps.find-tips.outputs.has_tips }}"
          echo "tips: ${{ steps.find-tips.outputs.tips }}"

      - name: Create Slack message file
        if: steps.find-tips.outputs.has_tips == 'true'
        run: |
          cat > slack_message.json << EOF
          {
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "${{ github.event_name == 'push' && '🎉 새로운 Kotlin 팁이 추가되었습니다!' || '📢 오늘의 Kotlin 팁' }}",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "${{ steps.find-tips.outputs.tips }}"
                }
              },
              {
                "type": "divider"
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "<https://github.com/${{ github.repository }}|저장소 방문하기> | <https://github.com/${{ github.repository }}/issues|이슈 제보하기>"
                  }
                ]
              }
            ]
          }
          EOF
          
          echo "Created Slack message file:"
          cat slack_message.json

      - name: Send notification to Slack
        if: steps.find-tips.outputs.has_tips == 'true'
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload-file-path: slack_message.json
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
